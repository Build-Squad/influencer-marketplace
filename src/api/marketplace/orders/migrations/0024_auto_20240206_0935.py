# Generated by Django 4.2.7 on 2024-02-06 07:41

from django.db import migrations


def migrate_data(apps, schema_editor):
    """"
    For all the orders in the database, create a transaction entry for the relevant ones
    
    Case 1:
    If order is completed and has a influencer_transaction_address :
    Create a transaction entry with the following data:
    - order
    - amount = None
    - status = 'success'
    - transaction_address = order.influencer_transaction_address
    - transaction_initiated_by = (User object that can be fetched from order item package of the order)
    - wallet = Primary wallet of the user
    
    Case 2:
    If order is completed and has a buyer_transaction_address :
    Create a transaction entry with the following data:
    
    - order
    - amount = None
    - status = 'success'
    - transaction_address = order.buyer_transaction_address
    - transaction_initiated_by = order.buyer
    - wallet = Primary wallet of the user
    """

    Order = apps.get_model('orders', 'Order')
    OrderItem = apps.get_model('orders', 'OrderItem')
    Transaction = apps.get_model('orders', 'Transaction')
    User = apps.get_model('accounts', 'User')
    Wallet = apps.get_model('accounts', 'Wallet')

    orders = Order.objects.all()

    for order in orders:
        if order.influencer_transaction_address is not None:
            order_items = OrderItem.objects.filter(order_id=order)
            user = User.objects.get(id=order_items[0].package.influencer.id)
            wallet = Wallet.objects.get(user_id=user, is_primary=True)

            Transaction.objects.create(
                order=order,
                amount=None,
                status='success',
                transaction_address=order.influencer_transaction_address,
                transaction_initiated_by=user,
                wallet=wallet
            )
        if order.buyer_transaction_address is not None:
            user = User.objects.get(id=order.buyer.id)
            wallet = Wallet.objects.get(user_id=user, is_primary=True)
            Transaction.objects.create(
                order=order,
                amount=None,
                status='success',
                transaction_address=order.buyer_transaction_address,
                transaction_initiated_by=user,
                wallet=wallet
            )


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0023_remove_transaction_created_at_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_data),
    ]
